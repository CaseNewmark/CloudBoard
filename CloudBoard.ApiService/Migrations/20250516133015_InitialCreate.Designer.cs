// <auto-generated />
using System;
using CloudBoard.ApiService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CloudBoard.ApiService.Migrations
{
    [DbContext(typeof(CloudBoardDbContext))]
    [Migration("20250516133015_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CloudBoard.ApiService.Data.CloudBoardDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("CloudBoardDocuments");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.Connection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CloudBoardDocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromConnectorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToConnectorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CloudBoardDocumentId");

                    b.ToTable("Connectors");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.Connector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("Connector");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CloudBoardDocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CloudBoardDocumentId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.Connection", b =>
                {
                    b.HasOne("CloudBoard.ApiService.Data.CloudBoardDocument", "CloudBoardDocument")
                        .WithMany("Connections")
                        .HasForeignKey("CloudBoardDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CloudBoardDocument");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.Connector", b =>
                {
                    b.HasOne("CloudBoard.ApiService.Data.Node", "Node")
                        .WithMany("Connectors")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.Node", b =>
                {
                    b.HasOne("CloudBoard.ApiService.Data.CloudBoardDocument", "CloudBoardDocument")
                        .WithMany("Nodes")
                        .HasForeignKey("CloudBoardDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CloudBoard.ApiService.Data.NodePosition", "Position", b1 =>
                        {
                            b1.Property<Guid>("NodeId")
                                .HasColumnType("uuid");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("NodeId");

                            b1.ToTable("Nodes");

                            b1.WithOwner()
                                .HasForeignKey("NodeId");
                        });

                    b.Navigation("CloudBoardDocument");

                    b.Navigation("Position")
                        .IsRequired();
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.CloudBoardDocument", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.Node", b =>
                {
                    b.Navigation("Connectors");
                });
#pragma warning restore 612, 618
        }
    }
}

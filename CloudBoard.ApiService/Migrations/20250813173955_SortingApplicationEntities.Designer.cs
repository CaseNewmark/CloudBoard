// <auto-generated />
using System;
using System.Text.Json;
using CloudBoard.ApiService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CloudBoard.ApiService.Migrations
{
    [DbContext(typeof(CloudBoardDbContext))]
    [Migration("20250813173955_SortingApplicationEntities")]
    partial class SortingApplicationEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CloudBoard.ApiService.Data.CloudBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("CloudBoardDocuments");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.Connection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CloudBoardDocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromConnectorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToConnectorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CloudBoardDocumentId");

                    b.ToTable("Connections", (string)null);
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.Connector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("Connectors", (string)null);
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.MarketSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BusinessUnit")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SegmentCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("SegmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("MarketSegments");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CloudBoardDocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<JsonDocument>("Properties")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CloudBoardDocumentId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.ProcessStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConflictingMaterials")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InfeedMaterialDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MainMaterialForEjection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MarketSegmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("ProcessStepId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ProcessStepName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("SortingApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("StepCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("StepType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MarketSegmentId");

                    b.HasIndex("SortingApplicationId");

                    b.ToTable("ProcessSteps");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.SortingApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SortingApplications");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.TargetMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Form")
                        .HasColumnType("integer");

                    b.Property<bool>("IsContaminant")
                        .HasColumnType("boolean");

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("TargetMaterials");
                });

            modelBuilder.Entity("MarketSegmentTargetMaterial", b =>
                {
                    b.Property<Guid>("MarketSegmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetMaterialsId")
                        .HasColumnType("uuid");

                    b.HasKey("MarketSegmentsId", "TargetMaterialsId");

                    b.HasIndex("TargetMaterialsId");

                    b.ToTable("MarketSegmentTargetMaterials", (string)null);
                });

            modelBuilder.Entity("ProcessStepTargetMaterial", b =>
                {
                    b.Property<Guid>("ProcessStepsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetMaterialsId")
                        .HasColumnType("uuid");

                    b.HasKey("ProcessStepsId", "TargetMaterialsId");

                    b.HasIndex("TargetMaterialsId");

                    b.ToTable("ProcessStepTargetMaterials", (string)null);
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.Connection", b =>
                {
                    b.HasOne("CloudBoard.ApiService.Data.CloudBoard", "CloudBoardDocument")
                        .WithMany("Connections")
                        .HasForeignKey("CloudBoardDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CloudBoardDocument");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.Connector", b =>
                {
                    b.HasOne("CloudBoard.ApiService.Data.Node", "Node")
                        .WithMany("Connectors")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.Node", b =>
                {
                    b.HasOne("CloudBoard.ApiService.Data.CloudBoard", "CloudBoardDocument")
                        .WithMany("Nodes")
                        .HasForeignKey("CloudBoardDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CloudBoard.ApiService.Data.NodePosition", "Position", b1 =>
                        {
                            b1.Property<Guid>("NodeId")
                                .HasColumnType("uuid");

                            b1.Property<float>("X")
                                .HasColumnType("real")
                                .HasColumnName("PositionX");

                            b1.Property<float>("Y")
                                .HasColumnType("real")
                                .HasColumnName("PositionY");

                            b1.HasKey("NodeId");

                            b1.ToTable("Nodes");

                            b1.WithOwner()
                                .HasForeignKey("NodeId");
                        });

                    b.Navigation("CloudBoardDocument");

                    b.Navigation("Position")
                        .IsRequired();
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.ProcessStep", b =>
                {
                    b.HasOne("CloudBoard.ApiService.Data.MarketSegment", "MarketSegment")
                        .WithMany("ProcessSteps")
                        .HasForeignKey("MarketSegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudBoard.ApiService.Data.SortingApplication", "SortingApplication")
                        .WithMany("ProcessSteps")
                        .HasForeignKey("SortingApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketSegment");

                    b.Navigation("SortingApplication");
                });

            modelBuilder.Entity("MarketSegmentTargetMaterial", b =>
                {
                    b.HasOne("CloudBoard.ApiService.Data.MarketSegment", null)
                        .WithMany()
                        .HasForeignKey("MarketSegmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudBoard.ApiService.Data.TargetMaterial", null)
                        .WithMany()
                        .HasForeignKey("TargetMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProcessStepTargetMaterial", b =>
                {
                    b.HasOne("CloudBoard.ApiService.Data.ProcessStep", null)
                        .WithMany()
                        .HasForeignKey("ProcessStepsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudBoard.ApiService.Data.TargetMaterial", null)
                        .WithMany()
                        .HasForeignKey("TargetMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.CloudBoard", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.MarketSegment", b =>
                {
                    b.Navigation("ProcessSteps");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.Node", b =>
                {
                    b.Navigation("Connectors");
                });

            modelBuilder.Entity("CloudBoard.ApiService.Data.SortingApplication", b =>
                {
                    b.Navigation("ProcessSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
